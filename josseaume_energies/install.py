# josseaume_energies/install.py - CONFIGURATION AUTOMATIQUE DES CHAMPS

import frappe
from frappe import _
from frappe.custom.doctype.custom_field.custom_field import create_custom_fields

def after_install():
    """
    Fonction appel√©e apr√®s l'installation de l'app
    Configure tous les champs personnalis√©s n√©cessaires
    """
    try:
        print("üöÄ Configuration de Josseaume Energies - Calcul de marges am√©lior√©...")
        
        # Cr√©er les champs personnalis√©s
        create_custom_fields_for_margins()
        
        # Configurer les param√®tres par d√©faut
        setup_default_settings()
        
        # Cr√©er les r√¥les et permissions
        setup_roles_and_permissions()
        
        # Importer les donn√©es de base
        import_master_data()
        
        print("‚úÖ Installation termin√©e avec succ√®s!")
        
        frappe.msgprint(
            title=_("Installation r√©ussie"),
            msg=_("""
                <h4>Josseaume Energies - Calcul de marges install√©!</h4>
                <p><strong>Nouvelles fonctionnalit√©s disponibles:</strong></p>
                <ul>
                    <li>‚úÖ Calcul automatique des marges avec remises</li>
                    <li>‚úÖ Gestion des articles sans prix de revient (co√ªt = 0‚Ç¨)</li>
                    <li>‚úÖ Support am√©lior√© des bundles/kits</li>
                    <li>‚úÖ Analyses d√©taill√©es des remises</li>
                    <li>‚úÖ Calendrier des interventions (vue employ√©s)</li>
                </ul>
                <p><strong>Prochaines √©tapes:</strong></p>
                <ol>
                    <li>V√©rifiez les prix de revient de vos articles</li>
                    <li>Testez le calcul des marges sur un devis</li>
                    <li>Configurez le calendrier des interventions</li>
                </ol>
            """),
            indicator="green"
        )
        
    except Exception as e:
        frappe.log_error(f"Erreur lors de l'installation: {str(e)}", "Installation Error")
        print(f"‚ùå Erreur installation: {str(e)}")

def after_migrate():
    """
    Fonction appel√©e apr√®s une migration/mise √† jour
    """
    try:
        print("üîÑ Mise √† jour de Josseaume Energies...")
        
        # V√©rifier et cr√©er les champs manquants
        create_custom_fields_for_margins()
        
        # Mettre √† jour les param√®tres
        setup_default_settings()
        
        # Recalculer les marges existantes si n√©cessaire
        migrate_existing_quotations()
        
        print("‚úÖ Mise √† jour termin√©e!")
        
    except Exception as e:
        frappe.log_error(f"Erreur lors de la migration: {str(e)}", "Migration Error")
        print(f"‚ùå Erreur migration: {str(e)}")

def create_custom_fields_for_margins():
    """
    Cr√©e tous les champs personnalis√©s n√©cessaires pour le calcul des marges
    """
    print("üìã Cr√©ation des champs personnalis√©s...")
    
    # Champs pour Quotation (devis)
    quotation_fields = {
        "Quotation": [
            {
                "fieldname": "margin_calculation_section",
                "label": "Calcul des Marges",
                "fieldtype": "Section Break",
                "insert_after": "terms",
                "collapsible": 1,
                "description": "Analyse automatique des marges avec prise en compte des remises"
            },
            {
                "fieldname": "custom_margin_calculated",
                "label": "Marges Calcul√©es",
                "fieldtype": "Check",
                "insert_after": "margin_calculation_section",
                "default": 0,
                "read_only": 1,
                "description": "Indique si les marges ont √©t√© calcul√©es automatiquement"
            },
            {
                "fieldname": "custom_total_gross",
                "label": "Total Brut (avant remises)",
                "fieldtype": "Currency",
                "insert_after": "custom_margin_calculated",
                "read_only": 1,
                "precision": 2,
                "description": "Montant total avant application des remises"
            },
            {
                "fieldname": "custom_total_discount",
                "label": "Total Remises",
                "fieldtype": "Currency", 
                "insert_after": "custom_total_gross",
                "read_only": 1,
                "precision": 2,
                "description": "Montant total des remises appliqu√©es"
            },
            {
                "fieldname": "custom_total_cost",
                "label": "Co√ªt Total",
                "fieldtype": "Currency",
                "insert_after": "custom_total_discount", 
                "read_only": 1,
                "precision": 2,
                "description": "Co√ªt total calcul√© (bundles inclus, articles sans co√ªt = 0‚Ç¨)"
            },
            {
                "fieldname": "custom_margin_amount",
                "label": "Marge (Montant)",
                "fieldtype": "Currency",
                "insert_after": "custom_total_cost",
                "read_only": 1,
                "precision": 2,
                "description": "Marge en euros (prix net - co√ªt total)"
            },
            {
                "fieldname": "margin_details_column",
                "label": "",
                "fieldtype": "Column Break",
                "insert_after": "custom_margin_amount"
            },
            {
                "fieldname": "custom_margin_percentage",
                "label": "Marge (%)",
                "fieldtype": "Percent",
                "insert_after": "margin_details_column",
                "read_only": 1,
                "precision": 2,
                "description": "Taux de marge calcul√© sur le prix net"
            },
            {
                "fieldname": "custom_margin_status",
                "label": "Statut Marge",
                "fieldtype": "Select",
                "insert_after": "custom_margin_percentage",
                "options": "\nExceptionnel\nExcellent\nBon\nAcceptable\nFaible\nN√©gatif",
                "read_only": 1,
                "description": "√âvaluation qualitative de la marge"
            },
            {
                "fieldname": "custom_items_without_cost",
                "label": "Articles sans co√ªt",
                "fieldtype": "Int",
                "insert_after": "custom_margin_status",
                "read_only": 1,
                "default": 0,
                "description": "Nombre d'articles sans prix de revient (co√ªt = 0‚Ç¨)"
            },
            {
                "fieldname": "custom_discount_percentage_global",
                "label": "Taux remise global (%)",
                "fieldtype": "Percent",
                "insert_after": "custom_items_without_cost",
                "read_only": 1,
                "precision": 2,
                "description": "Pourcentage de remise total appliqu√©"
            }
        ]
    }
    
    # Champs pour Quotation Item (articles de devis)
    quotation_item_fields = {
        "Quotation Item": [
            {
                "fieldname": "margin_item_section",
                "label": "D√©tails Marge",
                "fieldtype": "Section Break",
                "insert_after": "amount",
                "collapsible": 1,
                "description": "Calcul de marge pour cet article"
            },
            {
                "fieldname": "custom_cost_price",
                "label": "Prix de Revient",
                "fieldtype": "Currency",
                "insert_after": "margin_item_section",
                "read_only": 1,
                "precision": 2,
                "description": "Prix de revient unitaire (0‚Ç¨ si non d√©fini)"
            },
            {
                "fieldname": "custom_margin_amount",
                "label": "Marge (Montant)",
                "fieldtype": "Currency",
                "insert_after": "custom_cost_price",
                "read_only": 1,
                "precision": 2,
                "description": "Marge total pour cet article (quantit√© √ó marge unitaire)"
            },
            {
                "fieldname": "custom_margin_percentage",
                "label": "Marge (%)",
                "fieldtype": "Percent",
                "insert_after": "custom_margin_amount",
                "read_only": 1,
                "precision": 2,
                "description": "Taux de marge pour cet article"
            }
        ]
    }
    
    # Champs pour Item (articles)
    item_fields = {
        "Item": [
            {
                "fieldname": "cost_management_section",
                "label": "Gestion des Co√ªts",
                "fieldtype": "Section Break",
                "insert_after": "valuation_rate",
                "collapsible": 1,
                "description": "Configuration des prix de revient pour le calcul des marges"
            },
            {
                "fieldname": "custom_standard_cost",
                "label": "Co√ªt Standard (prioritaire)",
                "fieldtype": "Currency",
                "insert_after": "cost_management_section",
                "precision": 2,
                "description": "Prix de revient prioritaire (remplace valuation_rate si d√©fini)"
            },
            {
                "fieldname": "custom_cost_source",
                "label": "Source du Co√ªt",
                "fieldtype": "Select",
                "insert_after": "custom_standard_cost",
                "options": "\nValuation Rate\nDernier Achat\nCo√ªt Standard\nAucun (0‚Ç¨)",
                "read_only": 1,
                "description": "Source utilis√©e pour le calcul du prix de revient"
            },
            {
                "fieldname": "custom_margin_warning_threshold",
                "label": "Seuil d'alerte marge (%)",
                "fieldtype": "Float",
                "insert_after": "custom_cost_source",
                "precision": 1,
                "default": 10.0,
                "description": "Seuil en dessous duquel une alerte est g√©n√©r√©e"
            }
        ]
    }
    
    # Champs pour Sales Order (commandes client - calendrier)
    sales_order_fields = {
        "Sales Order": [
            {
                "fieldname": "calendar_integration_section",
                "label": "Int√©gration Calendrier",
                "fieldtype": "Section Break", 
                "insert_after": "delivery_date",
                "collapsible": 1,
                "description": "Liaison avec le calendrier des interventions"
            },
            {
                "fieldname": "custom_calendar_event",
                "label": "√âv√©nement Calendrier",
                "fieldtype": "Link",
                "options": "Event",
                "insert_after": "calendar_integration_section",
                "read_only": 1,
                "description": "Lien vers l'√©v√©nement cr√©√© dans le calendrier"
            },
            {
                "fieldname": "custom_horaire",
                "label": "Horaire Pr√©vu",
                "fieldtype": "Select",
                "insert_after": "custom_calendar_event",
                "options": "\nMatin\nApr√®s-midi\nJourn√©e compl√®te",
                "default": "Matin",
                "description": "Cr√©neau horaire pour l'intervention"
            },
            {
                "fieldname": "intervention_details_column",
                "label": "",
                "fieldtype": "Column Break",
                "insert_after": "custom_horaire"
            },
            {
                "fieldname": "custom_intervenant",
                "label": "Intervenant",
                "fieldtype": "Link",
                "options": "Employee",
                "insert_after": "intervention_details_column",
                "description": "Employ√© assign√© √† cette intervention"
            },
            {
                "fieldname": "custom_type_de_commande",
                "label": "Type d'Intervention",
                "fieldtype": "Select",
                "insert_after": "custom_intervenant",
                "options": "\nEntretien\nInstallation\nLivraison Granule\nLivraison Fuel\nD√©pannage",
                "description": "Nature de l'intervention √† effectuer"
            },
            {
                "fieldname": "custom_commentaire",
                "label": "Commentaires",
                "fieldtype": "Small Text",
                "insert_after": "custom_type_de_commande",
                "description": "Instructions particuli√®res pour l'intervention"
            }
        ]
    }
    
    # Champs pour Customer (clients - informations suppl√©mentaires)
    customer_fields = {
        "Customer": [
            {
                "fieldname": "intervention_info_section",
                "label": "Informations Interventions",
                "fieldtype": "Section Break",
                "insert_after": "mobile_no",
                "collapsible": 1,
                "description": "Informations utiles pour les interventions"
            },
            {
                "fieldname": "custom_appareil",
                "label": "Type d'Appareil",
                "fieldtype": "Data",
                "insert_after": "intervention_info_section",
                "description": "Type d'appareil install√© chez le client"
            },
            {
                "fieldname": "custom_camion",
                "label": "Camion Requis",
                "fieldtype": "Select",
                "insert_after": "custom_appareil",
                "options": "\nAucun\nPetit camion\nGrand camion\nCamion-grue",
                "default": "Aucun",
                "description": "Type de v√©hicule n√©cessaire pour l'intervention"
            }
        ]
    }
    
    # Champs pour Employee (employ√©s - √©quipes)
    employee_fields = {
        "Employee": [
            {
                "fieldname": "teams_assignment_section",
                "label": "Assignation √âquipes",
                "fieldtype": "Section Break",
                "insert_after": "designation",
                "collapsible": 1,
                "description": "√âquipes auxquelles appartient cet employ√©"
            },
            {
                "fieldname": "custom_livraisons",
                "label": "√âquipe Livraisons",
                "fieldtype": "Check",
                "insert_after": "teams_assignment_section",
                "default": 0,
                "description": "Membre de l'√©quipe livraisons"
            },
            {
                "fieldname": "custom_installations",
                "label": "√âquipe Installations",
                "fieldtype": "Check",
                "insert_after": "custom_livraisons",
                "default": 0,
                "description": "Membre de l'√©quipe installations"
            },
            {
                "fieldname": "custom_entretiensramonages",
                "label": "√âquipe Entretiens/Ramonages",
                "fieldtype": "Check",
                "insert_after": "custom_installations",
                "default": 0,
                "description": "Membre de l'√©quipe entretiens et ramonages"
            },
            {
                "fieldname": "teams_column_1",
                "label": "",
                "fieldtype": "Column Break",
                "insert_after": "custom_entretiensramonages"
            },
            {
                "fieldname": "custom_depannages_poeles",
                "label": "√âquipe D√©pannages Po√™les",
                "fieldtype": "Check",
                "insert_after": "teams_column_1",
                "default": 0,
                "description": "Membre de l'√©quipe d√©pannages po√™les"
            },
            {
                "fieldname": "custom_depannages_chauffage",
                "label": "√âquipe D√©pannages Chauffage",
                "fieldtype": "Check",
                "insert_after": "custom_depannages_poeles",
                "default": 0,
                "description": "Membre de l'√©quipe d√©pannages chauffage"
            },
            {
                "fieldname": "custom_electricite",
                "label": "√âquipe √âlectricit√©",
                "fieldtype": "Check",
                "insert_after": "custom_depannages_chauffage",
                "default": 0,
                "description": "Membre de l'√©quipe √©lectricit√©"
            },
            {
                "fieldname": "teams_column_2",
                "label": "",
                "fieldtype": "Column Break",
                "insert_after": "custom_electricite"
            },
            {
                "fieldname": "custom_photovoltaique",
                "label": "√âquipe Photovolta√Øque",
                "fieldtype": "Check",
                "insert_after": "teams_column_2",
                "default": 0,
                "description": "Membre de l'√©quipe photovolta√Øque"
            },
            {
                "fieldname": "custom_bureau",
                "label": "√âquipe Bureau",
                "fieldtype": "Check",
                "insert_after": "custom_photovoltaique",
                "default": 0,
                "description": "Membre de l'√©quipe bureau"
            },
            {
                "fieldname": "custom_commercial",
                "label": "√âquipe Commercial",
                "fieldtype": "Check",
                "insert_after": "custom_bureau",
                "default": 0,
                "description": "Membre de l'√©quipe commerciale"
            },
            {
                "fieldname": "custom_renovation",
                "label": "√âquipe R√©novation",
                "fieldtype": "Check",
                "insert_after": "custom_commercial",
                "default": 0,
                "description": "Membre de l'√©quipe r√©novation"
            }
        ]
    }
    
    # Combiner tous les champs
    all_custom_fields = {}
    all_custom_fields.update(quotation_fields)
    all_custom_fields.update(quotation_item_fields)
    all_custom_fields.update(item_fields)
    all_custom_fields.update(sales_order_fields)
    all_custom_fields.update(customer_fields)
    all_custom_fields.update(employee_fields)
    
    # Cr√©er les champs
    try:
        create_custom_fields(all_custom_fields)
        print("‚úÖ Champs personnalis√©s cr√©√©s avec succ√®s")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur cr√©ation champs: {str(e)}")
        frappe.log_error(f"Erreur cr√©ation champs personnalis√©s: {str(e)}", "Custom Fields Error")

def setup_default_settings():
    """
    Configure les param√®tres par d√©faut du syst√®me
    """
    print("‚öôÔ∏è  Configuration des param√®tres par d√©faut...")
    
    try:
        # Param√®tres pour le calcul des marges
        margin_settings = {
            "auto_calculate_margins": 1,
            "margin_warning_threshold": 10.0,
            "zero_cost_allowed": 1,
            "include_discounts_in_margin": 1,
            "bundle_cost_calculation_method": "components_sum"
        }
        
        for setting, value in margin_settings.items():
            if not frappe.db.exists("Singles", setting):
                frappe.db.set_single_value("System Settings", setting, value)
        
        # Param√®tres pour le calendrier
        calendar_settings = {
            "default_calendar_view": "Employ√©s",
            "auto_create_events": 1,
            "sync_delivery_dates": 1
        }
        
        for setting, value in calendar_settings.items():
            if not frappe.db.exists("Singles", setting):
                frappe.db.set_single_value("System Settings", setting, value)
        
        frappe.db.commit()
        print("‚úÖ Param√®tres configur√©s")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur configuration param√®tres: {str(e)}")
        frappe.log_error(f"Erreur configuration param√®tres: {str(e)}", "Settings Error")

def setup_roles_and_permissions():
    """
    Configure les r√¥les et permissions n√©cessaires
    """
    print("üë• Configuration des r√¥les et permissions...")
    
    try:
        # Cr√©er des r√¥les personnalis√©s si n√©cessaire
        custom_roles = [
            {
                "role_name": "Margin Analyst",
                "role_description": "Peut analyser les marges et les co√ªts"
            },
            {
                "role_name": "Calendar Manager", 
                "role_description": "Peut g√©rer le calendrier des interventions"
            }
        ]
        
        for role_data in custom_roles:
            if not frappe.db.exists("Role", role_data["role_name"]):
                role = frappe.get_doc({
                    "doctype": "Role",
                    "role_name": role_data["role_name"],
                    "disabled": 0,
                    "desk_access": 1
                })
                role.insert(ignore_permissions=True)
                print(f"‚úÖ R√¥le cr√©√©: {role_data['role_name']}")
        
        frappe.db.commit()
        print("‚úÖ R√¥les configur√©s")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur configuration r√¥les: {str(e)}")
        frappe.log_error(f"Erreur configuration r√¥les: {str(e)}", "Roles Error")

def import_master_data():
    """
    Importe les donn√©es de base n√©cessaires
    """
    print("üìä Import des donn√©es de base...")
    
    try:
        # Cr√©er des groupes d'articles si n√©cessaire
        item_groups = [
            "Po√™les √† Granul√©s",
            "Chaudi√®res", 
            "Granul√©s",
            "Fuel/Fioul",
            "Services Entretien",
            "Services Installation"
        ]
        
        for group_name in item_groups:
            if not frappe.db.exists("Item Group", group_name):
                group = frappe.get_doc({
                    "doctype": "Item Group",
                    "item_group_name": group_name,
                    "parent_item_group": "All Item Groups",
                    "is_group": 0
                })
                group.insert(ignore_permissions=True)
                print(f"‚úÖ Groupe d'articles cr√©√©: {group_name}")
        
        # Cr√©er des territoires de base
        territories = [
            "ZONE 101", "ZONE 102", "ZONE 103", "ZONE 104", "ZONE 105",
            "ZONE 201", "ZONE 202", "ZONE 203", "ZONE 204", "ZONE 205"
        ]
        
        for territory_name in territories:
            if not frappe.db.exists("Territory", territory_name):
                territory = frappe.get_doc({
                    "doctype": "Territory",
                    "territory_name": territory_name,
                    "parent_territory": "All Territories",
                    "is_group": 0
                })
                territory.insert(ignore_permissions=True)
                print(f"‚úÖ Territoire cr√©√©: {territory_name}")
        
        frappe.db.commit()
        print("‚úÖ Donn√©es de base import√©es")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur import donn√©es: {str(e)}")
        frappe.log_error(f"Erreur import donn√©es de base: {str(e)}", "Master Data Error")

def migrate_existing_quotations():
    """
    Met √† jour les devis existants avec les nouveaux champs de marge
    """
    print("üîÑ Migration des devis existants...")
    
    try:
        # R√©cup√©rer les devis r√©cents sans calcul de marge
        quotations = frappe.get_all("Quotation", 
            filters={
                "docstatus": ["<", 2],
                "creation": [">=", "2024-01-01"],
                "custom_margin_calculated": ["!=", 1]
            },
            fields=["name"],
            limit=50  # Limiter pour √©viter les timeouts
        )
        
        print(f"üìã Migration de {len(quotations)} devis...")
        
        migrated_count = 0
        for quotation in quotations:
            try:
                # Recalculer les marges pour ce devis
                from josseaume_energies.margin_calculation_simple import calculate_quotation_margin
                
                result = calculate_quotation_margin(quotation.name)
                if result and result.get("status") == "success":
                    # Marquer comme migr√©
                    frappe.db.set_value("Quotation", quotation.name, "custom_margin_calculated", 1)
                    migrated_count += 1
                    
            except Exception as e:
                frappe.log_error(f"Erreur migration devis {quotation.name}: {str(e)}", "Quotation Migration Error")
        
        frappe.db.commit()
        print(f"‚úÖ {migrated_count} devis migr√©s avec succ√®s")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur migration devis: {str(e)}")
        frappe.log_error(f"Erreur migration devis existants: {str(e)}", "Migration Error")

def daily_cost_check():
    """
    T√¢che quotidienne : v√©rifier les articles sans co√ªt
    """
    try:
        from josseaume_energies.margin_calculation_simple import check_items_without_cost
        
        result = check_items_without_cost()
        if result and result.get("status") == "success":
            items_without_cost = result.get("items_without_cost", 0)
            
            if items_without_cost > 0:
                # Envoyer une notification si n√©cessaire
                frappe.log_error(f"Alerte quotidienne: {items_without_cost} articles sans prix de revient", "Daily Cost Check")
                
                # Optionnel: envoyer un email aux responsables
                if items_without_cost > 10:  # Seuil d'alerte
                    send_cost_alert_email(items_without_cost)
    
    except Exception as e:
        frappe.log_error(f"Erreur v√©rification quotidienne des co√ªts: {str(e)}", "Daily Cost Check Error")

def weekly_valuation_sync():
    """
    T√¢che hebdomadaire : synchroniser les prix d'achat
    """
    try:
        from josseaume_energies.margin_calculation_simple import sync_valuation_from_last_purchase
        
        result = sync_valuation_from_last_purchase()
        if result and result.get("status") == "success":
            updated_count = result.get("updated_count", 0)
            frappe.log_error(f"Synchronisation hebdomadaire: {updated_count} prix de valorisation mis √† jour", "Weekly Valuation Sync")
    
    except Exception as e:
        frappe.log_error(f"Erreur synchronisation hebdomadaire: {str(e)}", "Weekly Sync Error")

def send_cost_alert_email(items_count):
    """
    Envoie un email d'alerte pour les articles sans co√ªt
    """
    try:
        recipients = ["sales@josseaume-energies.com", "admin@josseaume-energies.com"]
        
        subject = f"Alerte: {items_count} articles sans prix de revient"
        
        message = f"""
        <h3>Alerte Articles sans Prix de Revient</h3>
        <p><strong>{items_count} articles</strong> n'ont pas de prix de revient d√©fini.</p>
        <p>Ces articles auront un <strong>co√ªt de 0‚Ç¨</strong> dans les calculs de marge.</p>
        <p>Action recommand√©e: Mettre √† jour les prix de valorisation via Stock > Article</p>
        <p><a href="/app/query-report/Items%20Without%20Cost">Voir le rapport d√©taill√©</a></p>
        """
        
        frappe.sendmail(
            recipients=recipients,
            subject=subject,
            message=message,
            header="Josseaume Energies - Alerte Co√ªts"
        )
        
    except Exception as e:
        frappe.log_error(f"Erreur envoi email alerte: {str(e)}", "Email Alert Error")

# NOUVELLES fonctions utilitaires
def check_installation_health():
    """
    V√©rifie que l'installation est compl√®te et fonctionnelle
    """
    health_report = {
        "status": "healthy",
        "issues": [],
        "recommendations": []
    }
    
    try:
        # V√©rifier les champs personnalis√©s
        required_quotation_fields = ["custom_margin_calculated", "custom_total_cost", "custom_margin_percentage"]
        for field in required_quotation_fields:
            if not frappe.db.has_column("Quotation", field):
                health_report["issues"].append(f"Champ manquant: Quotation.{field}")
                health_report["status"] = "needs_attention"
        
        # V√©rifier les prix de valorisation
        items_without_cost = frappe.db.count("Item", {
            "disabled": 0,
            "valuation_rate": ["in", [0, None]]
        })
        
        total_items = frappe.db.count("Item", {"disabled": 0})
        
        if items_without_cost > 0:
            percentage = (items_without_cost / total_items) * 100
            if percentage > 20:
                health_report["issues"].append(f"{items_without_cost} articles sans prix de revient ({percentage:.1f}%)")
                health_report["recommendations"].append("Mettre √† jour les prix de valorisation des articles")
        
        # V√©rifier les bundles
        bundles_count = frappe.db.count("Product Bundle")
        if bundles_count > 0:
            health_report["recommendations"].append(f"{bundles_count} bundles d√©tect√©s - v√©rifiez leurs co√ªts")
        
        return health_report
        
    except Exception as e:
        health_report["status"] = "error"
        health_report["issues"].append(f"Erreur v√©rification: {str(e)}")
        return health_report

def repair_installation():
    """
    R√©pare les probl√®mes d'installation d√©tect√©s
    """
    try:
        print("üîß R√©paration de l'installation...")
        
        # Re-cr√©er les champs manquants
        create_custom_fields_for_margins()
        
        # Re-configurer les param√®tres
        setup_default_settings()
        
        # Recalculer quelques marges pour tester
        test_quotations = frappe.get_all("Quotation", 
            filters={"docstatus": 1}, 
            limit=5
        )
        
        for quotation in test_quotations:
            try:
                from josseaume_energies.margin_calculation_simple import calculate_quotation_margin
                calculate_quotation_margin(quotation.name)
            except:
                pass
        
        print("‚úÖ R√©paration termin√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur r√©paration: {str(e)}")
        return False